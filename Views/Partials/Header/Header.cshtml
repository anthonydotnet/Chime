@inherits UmbracoViewPage
@using Umbraco.Web.Models

@{
  IPublishedContent RootPage = Model.Root();
  IEnumerable<IPublishedContent> Pages = RootPage.Children().Where(x => x.IsVisible());
  IPublishedContent SettingsPage = Umbraco.Content(1079);
  string WebsiteName = SettingsPage?.Value<string>("settingsWebsiteName");
}

<header class="bg-white shadow fixed w-full lg:sticky top-0 z-50" x-data="{ open: false }">
  <div class="container mx-auto px-4 flex flex-col">
    <div class="flex h-16 items-center justify-between">
      <div class="flex">
        <a class="text-green-700 text-lg font-medium" href="/" title="Back to homepage">@WebsiteName</a>
      </div>
      <div class="flex lg:hidden">
        <button class="text-gray-600" @@click="open = true">
          <svg xmlns="http://www.w3.org/2000/svg" class="fill-current" width="24" height="24">
            <path d="M4 5h16a1 1 0 010 2H4a1 1 0 110-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2zm0 6h16a1 1 0 010 2H4a1 1 0 010-2z"/>
          </svg>
        </button>
      </div>
      <div class="hidden lg:flex">
        <nav>
          @if(Pages.Any())
          {
            foreach(IPublishedContent Page in Pages)
            {
              <a class="inline-block text-gray-600 px-4 hover:text-green-800 @(Page.IsAncestorOrSelf(Model) ? "text-green-800 font-medium" : null)" href="@Page.Url" title="@Page.Name">@Page.Name</a>
            }
          }
        </nav>
        <div class="flex items-center" x-data="searchModal()">
          <button x-on:click="toggleSearch()" class="text-gray-600 mx-4" id="searchToggleButton">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 fill-current" viewbox="0 0 24 24">
              <path d="M16.32 14.9l5.39 5.4a1 1 0 01-1.42 1.4l-5.38-5.38a8 8 0 111.41-1.41zM10 16a6 6 0 100-12 6 6 0 000 12z"/>
            </svg>
          </button>
          <div x-show.immediate.transition.duration.400ms="isOpen()" style="display: none;" class="fixed top-0 left-0 w-screen h-screen z-40 flex items-center flex-col justify-center px-8" id="searchModal">
            <div class="w-full h-full z-40 absolute top-0 bg-gray-100 opacity-75" @@click="toggleSearch()"></div>
            <div class="bg-white shadow-xl rounded-lg p-12 relative z-50 w-1/2">
              <div class="flex justify-between">
                <span class="text-gray-700 text-2xl font-medium">
                  @Umbraco.GetDictionaryValue("Search.Modal.Title")
                </span>
                <button @@click="toggleSearch()" class="text-green-600 uppercase text-sm">
                  <svg width="24" height="24" class="stroke-current" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M6 18L18 6M6 6L18 18" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </button>
              </div>
              <p class="mt-4 text-gray-600">
                @Umbraco.GetDictionaryValue("Search.Modal.Text")
              </p>
              <form methopd="POST" action="/search" class="flex mt-4">
                <input type="text" class="inline-block py-2 px-3 text-gray-600 bg-transparent border border-gray-300 w-full rounded-l outline-none shadow" placeholder="@Umbraco.GetDictionaryValue("Search.Modal.Placeholder")" id="searchQuery" name="query">
                <button class="bg-green-600 hover:bg-green-700 text-white rounded-r px-4 inline-block outline-none shadow">
                  @Umbraco.GetDictionaryValue("Search.Modal.Button")
                </button>                
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    @if(Pages.Any())
    {
      <nav class="w-full divide-y lg:hidden border-t" x-show="open" @@click.away="open = false">
        @foreach(IPublishedContent Page in Pages)
        {
          <a class="block text-gray-600 py-4 @(Page.IsAncestorOrSelf(Model) ? "text-green-800 font-medium" : null)" href="@Page.Url">@Page.Name</a>
        }
      </nav>
    }
  </nav>
</header>

<script>
  function searchModal() {
    return {
      showSearch: false,
      toggleSearch() {
        this.showSearch = !this.showSearch
        document.getElementById("searchToggleButton").blur()
      },
      isOpen() {
        return this.showSearch === true
      }
    }
  }
</script>